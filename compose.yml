version: "3.8"

services:
  app:
    build: .
    container_name: app
    restart: unless-stopped
    volumes:
      - ./app/static:/my_booking/api/static  # Локальный биндинг для статики
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    command: /my_booking/docker/app.sh
    ports:
      - "8000:8000"
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:15
    container_name: db
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10
    command: postgres -c log_destination=stderr  # Логи в stdout
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    volumes:
      - redis_data:/data
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  celery:
    build: .
    container_name: celery
    command: ['/my_booking/docker/celery.sh', 'celery']
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    volumes:
      - .:/my_booking
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  flower:
    build: .
    container_name: flower
    command: ['/my_booking/docker/celery.sh', 'flower']
    depends_on:
      - redis
      - celery
    env_file:
      - ./.env
    ports:
      - "5555:5555"
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge